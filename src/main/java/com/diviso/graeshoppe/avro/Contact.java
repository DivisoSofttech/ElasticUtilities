/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.diviso.graeshoppe.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Contact extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4554288299191303809L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Contact\",\"namespace\":\"com.diviso.graeshoppe.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"]},{\"name\":\"mobileNumber\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"phoneCode\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"telephone\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"email\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Contact> ENCODER =
      new BinaryMessageEncoder<Contact>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Contact> DECODER =
      new BinaryMessageDecoder<Contact>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Contact> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Contact> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Contact>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Contact to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Contact from a ByteBuffer. */
  public static Contact fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long id;
  @Deprecated public java.lang.Long mobileNumber;
  @Deprecated public java.lang.Long phoneCode;
  @Deprecated public java.lang.Long telephone;
  @Deprecated public java.lang.String email;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Contact() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param mobileNumber The new value for mobileNumber
   * @param phoneCode The new value for phoneCode
   * @param telephone The new value for telephone
   * @param email The new value for email
   */
  public Contact(java.lang.Long id, java.lang.Long mobileNumber, java.lang.Long phoneCode, java.lang.Long telephone, java.lang.String email) {
    this.id = id;
    this.mobileNumber = mobileNumber;
    this.phoneCode = phoneCode;
    this.telephone = telephone;
    this.email = email;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return mobileNumber;
    case 2: return phoneCode;
    case 3: return telephone;
    case 4: return email;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: mobileNumber = (java.lang.Long)value$; break;
    case 2: phoneCode = (java.lang.Long)value$; break;
    case 3: telephone = (java.lang.Long)value$; break;
    case 4: email = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'mobileNumber' field.
   * @return The value of the 'mobileNumber' field.
   */
  public java.lang.Long getMobileNumber() {
    return mobileNumber;
  }

  /**
   * Sets the value of the 'mobileNumber' field.
   * @param value the value to set.
   */
  public void setMobileNumber(java.lang.Long value) {
    this.mobileNumber = value;
  }

  /**
   * Gets the value of the 'phoneCode' field.
   * @return The value of the 'phoneCode' field.
   */
  public java.lang.Long getPhoneCode() {
    return phoneCode;
  }

  /**
   * Sets the value of the 'phoneCode' field.
   * @param value the value to set.
   */
  public void setPhoneCode(java.lang.Long value) {
    this.phoneCode = value;
  }

  /**
   * Gets the value of the 'telephone' field.
   * @return The value of the 'telephone' field.
   */
  public java.lang.Long getTelephone() {
    return telephone;
  }

  /**
   * Sets the value of the 'telephone' field.
   * @param value the value to set.
   */
  public void setTelephone(java.lang.Long value) {
    this.telephone = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Creates a new Contact RecordBuilder.
   * @return A new Contact RecordBuilder
   */
  public static com.diviso.graeshoppe.avro.Contact.Builder newBuilder() {
    return new com.diviso.graeshoppe.avro.Contact.Builder();
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.diviso.graeshoppe.avro.Contact.Builder newBuilder(com.diviso.graeshoppe.avro.Contact.Builder other) {
    return new com.diviso.graeshoppe.avro.Contact.Builder(other);
  }

  /**
   * Creates a new Contact RecordBuilder by copying an existing Contact instance.
   * @param other The existing instance to copy.
   * @return A new Contact RecordBuilder
   */
  public static com.diviso.graeshoppe.avro.Contact.Builder newBuilder(com.diviso.graeshoppe.avro.Contact other) {
    return new com.diviso.graeshoppe.avro.Contact.Builder(other);
  }

  /**
   * RecordBuilder for Contact instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Contact>
    implements org.apache.avro.data.RecordBuilder<Contact> {

    private java.lang.Long id;
    private java.lang.Long mobileNumber;
    private java.lang.Long phoneCode;
    private java.lang.Long telephone;
    private java.lang.String email;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.diviso.graeshoppe.avro.Contact.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[1].schema(), other.mobileNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phoneCode)) {
        this.phoneCode = data().deepCopy(fields()[2].schema(), other.phoneCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.telephone)) {
        this.telephone = data().deepCopy(fields()[3].schema(), other.telephone);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Contact instance
     * @param other The existing instance to copy.
     */
    private Builder(com.diviso.graeshoppe.avro.Contact other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[1].schema(), other.mobileNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phoneCode)) {
        this.phoneCode = data().deepCopy(fields()[2].schema(), other.phoneCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.telephone)) {
        this.telephone = data().deepCopy(fields()[3].schema(), other.telephone);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumber' field.
      * @return The value.
      */
    public java.lang.Long getMobileNumber() {
      return mobileNumber;
    }

    /**
      * Sets the value of the 'mobileNumber' field.
      * @param value The value of 'mobileNumber'.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder setMobileNumber(java.lang.Long value) {
      validate(fields()[1], value);
      this.mobileNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumber' field has been set.
      * @return True if the 'mobileNumber' field has been set, false otherwise.
      */
    public boolean hasMobileNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'mobileNumber' field.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder clearMobileNumber() {
      mobileNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneCode' field.
      * @return The value.
      */
    public java.lang.Long getPhoneCode() {
      return phoneCode;
    }

    /**
      * Sets the value of the 'phoneCode' field.
      * @param value The value of 'phoneCode'.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder setPhoneCode(java.lang.Long value) {
      validate(fields()[2], value);
      this.phoneCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneCode' field has been set.
      * @return True if the 'phoneCode' field has been set, false otherwise.
      */
    public boolean hasPhoneCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'phoneCode' field.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder clearPhoneCode() {
      phoneCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'telephone' field.
      * @return The value.
      */
    public java.lang.Long getTelephone() {
      return telephone;
    }

    /**
      * Sets the value of the 'telephone' field.
      * @param value The value of 'telephone'.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder setTelephone(java.lang.Long value) {
      validate(fields()[3], value);
      this.telephone = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'telephone' field has been set.
      * @return True if the 'telephone' field has been set, false otherwise.
      */
    public boolean hasTelephone() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'telephone' field.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder clearTelephone() {
      telephone = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }

    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder setEmail(java.lang.String value) {
      validate(fields()[4], value);
      this.email = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.diviso.graeshoppe.avro.Contact.Builder clearEmail() {
      email = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Contact build() {
      try {
        Contact record = new Contact();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.mobileNumber = fieldSetFlags()[1] ? this.mobileNumber : (java.lang.Long) defaultValue(fields()[1]);
        record.phoneCode = fieldSetFlags()[2] ? this.phoneCode : (java.lang.Long) defaultValue(fields()[2]);
        record.telephone = fieldSetFlags()[3] ? this.telephone : (java.lang.Long) defaultValue(fields()[3]);
        record.email = fieldSetFlags()[4] ? this.email : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Contact>
    WRITER$ = (org.apache.avro.io.DatumWriter<Contact>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Contact>
    READER$ = (org.apache.avro.io.DatumReader<Contact>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
